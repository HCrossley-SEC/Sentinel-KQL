Imposisble Travel Rule (MCAS)
This Rule will excluded failed logons (But not if it failed due to MFA). 

SecurityAlert
| where ProductName == "Microsoft Cloud App Security"
| where AlertName contains "Impossible travel activity"
| where not(Status == "Resolved" or Status == "Dismissed")
| extend AadUserId = extract('AadUserId":"([^"]*)', 1, tostring(parsejson(Entities)))
| extend IP_Addresses_ = tostring(parse_json(ExtendedProperties).["IP Addresses"])
| mv-expand IP_Addresses_ = split(IP_Addresses_,",")
| extend IP_Addresses_ = tostring(IP_Addresses_)
// Join the non-interactive sign-in logs based on the AadUserId and the anomalous country
| join kind=leftouter (
AADNonInteractiveUserSignInLogs
        | extend ResultType_Non = tostring(ResultType)
// Remove all of the failures where it was caused by Incorrect Username or password (50126) or Account is locked (50053) - locked account would be caused by the incorrect username/password, any other failure reasons would still appear even if it caused the account to be locked.
        | where ResultType_Non !in (50126,50053)
        | extend ResultDescription_Non = tostring(ResultDescription)
        | extend IPAddress_Non = tostring(IPAddress)
        | where TimeGenerated >= ago(48h)
        )
        on $left.AadUserId == $right.UserId and $left.IP_Addresses_ == $right.IPAddress_Non
// Join the SignIn logs based on the AadUserId and the anomalous country
| join kind=leftouter (SigninLogs
        | extend ResultType_Signin = tostring(ResultType)
// Remove all of the failures where it was caused by Incorrect Username or password (50126) or Account is locked (50053) - locked account would be caused by the incorrect username/password, any other failure reasons would still appear even if it caused the account to be locked.
        | where ResultType_Signin !in (50126,50053)
        | extend ResultDescription_Signin = tostring(ResultDescription)
        | extend IPAddress_Signin = tostring(IPAddress)
        | where TimeGenerated >= ago(48h)
        )
        on $left.AadUserId == $right.UserId and $left.IP_Addresses_ == $right.IPAddress_Signin
//Remove empty logs coming from MCAS logs
| where isnotempty(IPAddress_Non) or isnotempty(IPAddress_Signin)
| summarize arg_max(TimeGenerated, * ) by AadUserId, IP_Addresses_
